#!/bin/bash

# TODO: Make an option for generating reports with custom dates on the fly ex. gen-report -n 'bob' -p '123-123-1230' -e 'me@me.com' -b 'bob inc' -h '5' -d '05-04-2020'

# Set posix mode
set -o posix;

# Import Libraries
source /lib/GenReport/get.sh;
source /lib/GenReport/set.sh;

# Get todays date for file naming convention
report_date=$(date +%Y-%m-%d); # Sets file name later

# Set report path
report_path=/home/awesomepilot/Documents/Work/Notes

# Get the current report file
report_file="$report_path/$report_date.txt";

# Show the built in help text
function show_help() {
    # declare a variable to hold the content of help_doc.txt
    local help_text;
    help_text=$(</usr/share/help_doc.txt);
    
    # Echo help text to screen
    echo "$help_text";
    return 0;
}

# A function to export the report as a text file
function export_report() {
    local report_to_export="$1";
    
    if (! report_exists "$report_to_export") then
        echo "That report doesn't exist.  Nothing exported...";
        exit 1;
    fi
    
    local report_string=$(get_report "$report_to_export");
    
    unstringify_report "$report_string" > /home/"$USER"/Documents/Notes/"$report_to_export.txt";
}

# Parse arguments and set variables
while getopts "n:p:e:b:l:t:d:x:h:-:kq" arg; do
    case "$arg" in
        n)
            client_name=${OPTARG}; # Set Client Name
        ;;
        p)
            client_phone=${OPTARG}; # Set Client Phone
        ;;
        e)
            client_email=${OPTARG}; # Set Client Email
        ;;
        b)
            client_bizz_name=${OPTARG}; # Set Client Business Name
        ;;
        h)
            client_hours=${OPTARG}; # Set Client Hours
        ;;
        l)
            entry_to_list=${OPTARG}; # Get the entry to list
            
            rep_string=$(get_report "$entry_to_list");
            unstringify_report "$rep_string";
            
            exit 0;
        ;;
        k)
            # Get output of get_all_report_keys() and put it in an array
            key_arr=($(get_all_report_keys));

            # Iterate through the array and list our options on seperate lines
            for key in "${key_arr[@]}"; do
                echo "$key";
            done
            
            exit 0;
        ;;
        t) # (t)ransform edits reports
            edit_report ${OPTARG};
            exit 0;
        ;;
        q)
            get_latest_report;
            exit 0;
        ;;
        d)
            if (! delete_report ${OPTARG}) then
                echo "There was a problem deleting ${OPTARG}, it might not exist...";
                exit 1;
            fi

            exit 0;
        ;;
        x)
            export_report ${OPTARG};
            exit 0;
        ;;
        -)
            case "${OPTARG}" in
                'help')
                    show_help;
                    exit 0;
                ;;
                'test')
                    if (! bash /lib/GenReport/test/master_test.sh) then  # Run tests, be sure to run with bash and not sh
                        echo "Failed to start tests...is your default CLI environment /bin/sh?  If so please change to /bin/bash";
                        exit 1;
                    fi

                    exit 0;
                ;;
                *)
                    echo "Something went terribly wrong, please contact codecannamw@gmail.com to report this issue.";
                    exit 1;
            esac
        ;;
        ?)
            show_help;
            exit 1;
        ;;
        *)
            echo "Oops you may have made an invalid entry.  Pleae try again.";
            exit 1;
    esac
done

function create_work_notes() {
    # Clear screen
    clear;
    
    # Get work notes
    echo "Enter work notes, hit Ctl-D to save>";
    work=$(</dev/stdin); # Cannot be local

    # Check if work notes were left blank
    if [ -z "$work" ]; then
        if (whiptail --title "Leave notes blank?" --yesno "Are you sure you want to leave your work notes blank?" 8 78) then
            work='N/A';
        else
            work=$(</dev/stdin);
        fi
    fi

    return 0;
}

function create_side_notes() {
    # Clear screen
    clear;
    
    # Set side notes
    echo "Enter side notes if any, hit Ctl-D to save>";
    notes=$(</dev/stdin); # Cannot be local

    # Check if side notes were left blank
    if [ -z "$notes" ]; then
        notes='N/A';
    fi

    return 0;
}


# Create report at ~/$USER/Documents/Work/Notes/
function create_report() {
    # cat > $report_path/$report_date.txt << _EOF_
cat > /tmp/report.txt << _EOF_
(Client Report - Date: $report_date)
------------------------------------------
## Client Information ##
------------------------------------------
Client Name: $client_name
Client Phone: $client_phone
Client Email: $client_email
Client Business: $client_bizz_name
Client Hours: $client_hours
------------------------------------------
## Work Performed ##
------------------------------------------
$work
------------------------------------------
## Notes ##
------------------------------------------
$notes
------------------------------------------
_EOF_
    
    report_text=/tmp/report.txt;
    
    # Insert generated report into redis
    if (! set_report "$client_name" "$report_text") then
        echo "There was a problem inserting your report...Make sure Redis is up?";
        return 1;
    fi
    
    rm -rf "$report_text";
    return 0;
}

# Check if all required arguments are accounted for
if [ -z "$client_name" ]; then
    echo "You cannot leave Client Name field empty...";
    exit 1;
    elif [ -z "$client_phone" ]; then
    echo "You cannot leave Client Phone field empty...";
    exit 1;
    elif [ -z "$client_email" ]; then
    echo "You cannot leave Client Email field empty...";
    exit 1;
    elif [ -z "$client_bizz_name" ]; then
    echo "You cannot leave Client Bussiness Name field empty...";
    exit 1;
    elif [ -z "$client_hours" ]; then
    echo "You cannot leave Client Hours field empty...";
    exit 1;
    else
    # Create new report if not exists and overwrite if it does
    create_work_notes;
    create_side_notes;
    create_report;
fi